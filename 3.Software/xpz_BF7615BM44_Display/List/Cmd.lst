C51 COMPILER V9.60.7.0   CMD                                                               04/23/2024 20:16:29 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE CMD
OBJECT MODULE PLACED IN .\Output\Cmd.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\Cmd.c LARGE OMF2 OPTIMIZE(3,SPEED) BROWSE INCDIR(.\Application_Libr
                    -ary;.\BF7615BMXX_XXXX_Library;.\Code;.\Project;.\Hardware) DEBUG PRINT(.\List\Cmd.lst) TABS(2) OBJECT(.\Output\Cmd.obj)

line level    source

   1          #include "include.h"
*** ERROR C141 IN LINE 10 OF Code\crc.h: syntax error near ',', expected '<id>'
   2          
   3          #include "Cmd.h"
   4          
   5          
   6          #define CMD_READ_DATA_SIZE 32
   7          #define CMD_SEND_DATA_SIZE 20
   8          
   9          
  10          static xdata uint8 m_CmdReadBuf[CMD_READ_DATA_SIZE]   = {0};
  11          static xdata uint8 m_CmdReadCount             = 0;
  12          
  13          static xdata uint8 m_CmdSendBuf[CMD_SEND_DATA_SIZE]   = {0};
  14          static xdata uint8 m_CmdSendCount             = 0;
  15          static xdata uint8 m_CmdSendLen             = 0;
  16          
  17          static xdata PCMD_HEAD_T m_CmdSendHead = 0;
  18          
  19          
  20          
  21          static xdata uint16        m_crc16;
  22          
  23          
  24          
  25          void CmdInit(void){
  26   1        memset(m_CmdReadBuf, 0, CMD_READ_DATA_SIZE);
  27   1        m_CmdReadCount = 0;
  28   1        memset(m_CmdSendBuf, 0, CMD_SEND_DATA_SIZE);
  29   1        m_CmdSendCount = 0;
  30   1        m_CmdSendLen = 0;
  31   1      }
  32          
  33          
  34          uint8 CmdGetSendChr(uint8* out){
  35   1        if(m_CmdSendLen == 0) return FALSE;
  36   1      
  37   1        if(m_CmdSendCount >= m_CmdSendLen ){
  38   2          m_CmdSendLen = 0;
  39   2          m_CmdSendCount = 0;
  40   2          return FALSE;
  41   2        }
  42   1      
  43   1        *out = m_CmdSendBuf[m_CmdSendCount++];
  44   1      
  45   1        return TRUE;
  46   1      
  47   1      }
  48          
  49          void CmdRecv(uint8 in){
  50   1      
  51   1        if(m_CmdReadCount >= CMD_READ_DATA_SIZE) return;
  52   1      
  53   1        if((m_CmdReadCount == 0) && (in != 0x5a)){
C51 COMPILER V9.60.7.0   CMD                                                               04/23/2024 20:16:29 PAGE 2   

  54   2          m_CmdReadCount = 0;
  55   2          return;
  56   2        }
  57   1        else if((m_CmdReadCount == 1) && (in != 0xa5)){
  58   2          m_CmdReadCount = 0;
  59   2          return;
  60   2        }
  61   1      
  62   1        m_CmdReadBuf[m_CmdReadCount++] = in;
  63   1      
  64   1        
  65   1      }
  66          
  67          void CmdCloseRecvData(uint8 in){
  68   1        //memset(m_CmdReadBuf, 0, CMD_READ_DATA_SIZE);
  69   1        m_CmdReadCount = 0;
  70   1        UART1_BUF = in;
  71   1      }
  72          
  73          
  74          void CmdRecvPool(){
  75   1      
  76   1      #if(0)
              
              
                if((m_CmdReadCount == 1) && (m_CmdReadBuf[0] != 0x5a)){
                  m_CmdReadCount = 0;
                  return;
                }
                else if((m_CmdReadCount == 2) && (m_CmdReadBuf[1]  != 0xa5)){
                  m_CmdReadCount = 0;
                  return;
                }
                
                if(m_CmdReadCount < 29 )    return;
              
                //g_SysHardware.SysCnt = 0;
                
                m_CmdRecv = (PCMD_READ_T)(m_CmdReadBuf + 2);
              
                CmdSend();
                
              //  m_crc16 = CRC16_Modbus(m_CmdReadBuf,27);
              
                if(m_crc16 == m_CmdRecv->crc16){
                  g_View.VersionYearP     = m_CmdRecv->VersionYear;
                  g_View.VersionMonthP    = m_CmdRecv->VersionMonth;
                  g_View.VersionDayP      = m_CmdRecv->VersionDay;
              
                  if(g_View.buzzer == m_CmdRecv->buzzer ){
                    g_View.buzzer = 0;
                  }
                  
              //    SteamOvenCmdRecv(&m_CmdRecv->SteamOven);
              //    RangeHoodCmdRecv(&m_CmdRecv->RangeHood);
                }
                else{
                  //printf("Err:%04X,%04X\n", m_crc16, m_CmdRecv->crc16);
                  m_crc16 = 0;
                }
              
              
C51 COMPILER V9.60.7.0   CMD                                                               04/23/2024 20:16:29 PAGE 3   

                memset(m_CmdReadBuf, 0, CMD_READ_DATA_SIZE);
                m_CmdReadCount = 0;
              
              #endif
 120   1        
 121   1      }
 122          
 123          
 124          /*²éÑ¯Éè±¸×´Ì¬*/
 125          void CmdSendDeviceStatusQuery(){
 126   1        PCMD_QUERY_DEVICE_STATUS_T cmd_query_device_status = 0;
 127   1      
 128   1        memset(m_CmdSendBuf, 0, CMD_SEND_DATA_SIZE);
 129   1        
 130   1        (PCMD_HEAD_T)m_CmdSendHead = (PCMD_HEAD_T)(m_CmdSendBuf);
 131   1      
 132   1        m_CmdSendHead->magic = MAGIC_NUMBER;
 133   1      
 134   1        m_CmdSendHead->packet_id = g_View.packet_id_query_device_status;
 135   1      
 136   1        g_View.packet_id_query_device_status ++;
 137   1      
 138   1        if(g_View.packet_id_query_device_status > 0x10){
 139   2          g_View.packet_id_query_device_status = 0;
 140   2        }
 141   1      
 142   1        m_CmdSendHead->length = sizeof(CMD_HEAD_T) + sizeof(CMD_QUERY_DEVICE_STATUS_T);
 143   1      
 144   1        m_CmdSendHead->CommandCode = CMD_QUERY_DEVICE_STATUS;
 145   1      
 146   1        cmd_query_device_status = (PCMD_QUERY_DEVICE_STATUS_T)(m_CmdSendBuf + sizeof(CMD_HEAD_T));
 147   1      
 148   1      
 149   1      //  m_CmdSend->crc16 = CRC16_Modbus(m_CmdSendBuf,12);
 150   1      
 151   1        m_CmdSendLen = m_CmdSendHead->length;
 152   1      
 153   1        m_CmdSendCount = 0;
 154   1          
 155   1        UART0_BUF = m_CmdSendBuf[m_CmdSendCount++] ;
 156   1      }
 157          
 158          
 159          void CmdSend(){
 160   1      
 161   1      #if(0)
              
                //if(Uart0_Send_Flag){  Uart0_Send_Flag = 0;
              
                //memset(m_CmdSendBuf, 0, CMD_SEND_DATA_SIZE);
              
                m_CmdSendBuf[0] = 0x5a;
                m_CmdSendBuf[1] = 0xa5;
                
                m_CmdSend = (PCMD_SEND_T)(m_CmdSendBuf + 2);
              
                m_CmdSend->PowerOn    = g_View.PowerOn;
                m_CmdSend->buzzer     = g_View.buzzer;
              
              //  SteamOvenCmdSend(&m_CmdSend->SteamOven);
              //  RangeHoodCmdSend(&m_CmdSend->RangeHood);
                
C51 COMPILER V9.60.7.0   CMD                                                               04/23/2024 20:16:29 PAGE 4   

              //  m_CmdSend->crc16 = CRC16_Modbus(m_CmdSendBuf,12);
              
                m_CmdSendLen = 12 + 2;
                m_CmdSendCount = 0;
                  
                UART0_BUF=m_CmdSendBuf[m_CmdSendCount++] ;
              
              #endif  
 186   1        
 187   1      }
 188          
 189          
 190          void CmdSend1sLoop(){
 191   1      
 192   1        
 193   1      }
 194          
 195          
 196          
 197          
 198          
 199          
 200          
 201          
 202          
 203          
 204          
 205          
 206          
 207          
 208          
 209          
 210          
 211          
 212          
 213          
 214          
 215          
 216          

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
